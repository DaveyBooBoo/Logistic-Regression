
#################### Multiple Logistics Regression and Model Accuracy #############################################



### USE "Default" data available from ISLR package #######################################################
#### to predict probability of credit card default on the basis of balance, student status and income ####
 
install.packages("fBasics")

library(fBasics)
##Load ISLR package, which has the simulated Default data

install.packages("ISLR")

library(ISLR)

### Check what are the available datasets in the current R environmnet
data()

###Load the "Default" data 
data("Default")

#Observe the first 6 rows of the dataset
head(Default)

#names of the variables in the data
names(Default)

#Attach the dataset
attach(Default)


dim(Default)



################################################  PART  A   ###############################################################################

#Table 4.3 (JWHT): Fit a logistic regression to predict probability of default based on card balance, income, and student status 

###########################################################################################################################################

fit4=glm(default~balance+income+student, family="binomial", data=Default)
summary(fit4)




###########################################   PART B  #####################################################################################

#######################  COMPUTE DEFAULT PROBABILITY BASED ON THE PREDICTED MODEL  ########################################################

#The predict() function: predicts the default probability for an individual on the basis of the predicted model.

###########################################################################################################################################

pred_prob=predict(fit4,type="response")
head(pred_prob)

length(pred_prob)

# The contrasts() function indicates that R has created a dummy variable with a 1 for default=Yes
contrasts(default)



###################################  PART C  ##############################################################################################

#########################   DECIDE WHETHER A PERSON WILL DEFAULT OR NOT (ASSIGN YES or NO)    #############################################

#To predict whether a person will default, convert the predicted probabilities into class labels Yes or No.

###########################################################################################################################################

# The following command creates a vector of 10,000 No elements

glm.pred=rep("No",10000)


#The following command transforms all the elements with predicted probabilities of default greater than 0.5 from No to Yes

glm.pred[pred_prob>.5]="Yes"

head(glm.pred)

head(default)


#################################  PART D ##################################################################################################

############## COMPUTE MODEL ACCURACY: CONFUSION MATRIX ####################################################################################

#table() produces a confusion matrix to determine how many observations were correctly or incorrectly classified
#The diagonal elements of the confusion matrix indicate the correct predictions and the off-diagonal elements represent incorrect predictions.

############################################################################################################################################


table(glm.pred,default)


# mean(): computes fraction of individual for which the prediction was correct
mean(glm.pred==default)




############################  PART E  ########################################################################################################

############################# OVERALL ANALYSIS ###############################################################################################
 
## Logistic Model predicted: 145 would default: 105 actually defaulted and 40 did not
## Only 40 out of 9667 individual who did not default were incorrectly labeled (false positive). 
## Pretty low error rate (0.41%)
## However, among the 333 individuals who defaulted, 228 (or 68.5%) were missed by the logistic model.
## The overall correct predictions: (9627+105)/10,000 = 97.32%
## While the overall error rate is very low:100 - 97.32=2.68%
## But the error rate among the individuals who defaulted is very high
## From the perspective of a credit card company that is trying to identify high-risk individuals, 
## an error rate of 228/333 = 68.5% among individuals who defaulted may well be unacceptable

################################################################################################################################################




##########################################  PART F #############################################################################################

###################### SELECTING THRESHOLD #####################################################################################################

################################################################################################################################################

#### TRY A LOWER Threshhold ##############################################################################


#################### pred_prob>.4 #########################################################################

glm.pred=rep("No",10000)

glm.pred[pred_prob>.4]="Yes"

### FALSE Negative = 199/333 = 59.76%
### False Positive = 79/9667 = 0.82%
table(glm.pred,default)

# Correct prediction  =97.22% (lower than theshold 0.5)
mean(glm.pred==default)



################ pred_prob>.3 ##############################################################################

glm.pred=rep("No",10000)

glm.pred[pred_prob>.3]="Yes"

### FALSE Negative = 164/333 = 49.25%
### False Positive = 137/9667 = 1.42%
table(glm.pred,default)

# Correct prediction  =96.99% (lower than theshold 0.5)
mean(glm.pred==default)



####################### pred_prob>.2 ######################################################################

glm.pred=rep("No",10000)

glm.pred[pred_prob>.2]="Yes"

### FALSE Negative = 130/333 = 39.04%
### False Positive = 277/9667 = 2.86%
table(glm.pred,default)

# Correct prediction  =95.93% (lower than before)
mean(glm.pred==default)



