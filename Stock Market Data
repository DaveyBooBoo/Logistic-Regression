
##################################################################################################################

##################### TRANING VS. TEST DATA  #####################################################################

### BUILD THE MODEL BASED ON THE TRAINING SAMPLE, TEST THE MODEL ACCURACY ON HELD OUT SAMPLE (TEST SAMPLE) #######

##################################################################################################################



########################################################################################################################################

########################   ANALYZE STOCK MARKET DATA TO PREDICT WHETHER MARKET WILL GO UP OR DOWN ON A PARTICUALR DAY   ################

########################   BASED ON PAST MARKET RETURN DATA  ###########################################################################
########################################################################################################################################




# The Stock Market Data

# Smarket data is part of the ISLR library. 
#This data set contains percentage return of S&P500 stock index over 1,250 days
# from the beginning of 2001 till the end of 2005.
# For each date, the data has %return for each of the five previous days (Lag1,...Lag5), 
# Volume : Number of shares traded on the previous day , (in billions)
# Today: %return on the date in question
# Direction: whether the market was Up or Down on this date

#Load the ISLR Library

install.packages("ISLR")

library(ISLR)
#List the names of the variables in the data Smarket
names(Smarket)
#Display the dimension of the data
dim(Smarket)
head(Smarket)



#########################  PART A  ##############################################################################

##################### Tranining Vs. Test Data ###################################################################

#################################################################################################################

#We are interested in models performance on future days on which market movements are unknown.

# So far our training data (used to build model) and test data (used to test model accuracy) were same.
#Training error rate for the model: 100-52.2=47.8% 
#The training error rate underestimates the test error rate as we trained and tested the model on the same set of 1,250 observations.

#To better assess the accuracy of the logistic regression:
#Training Data: Fit the model using part of the data: 2001  2004
#Test Data (held out data): examine how well the model predicts the held out data : 2005


#The object train is a Boolean vector (TRUE/FALSE) of 1,250 elements, corresponsing to the obsrvations in our data sets
#TRUE: if observation corresponds to Year<2005, FALSE: if observations corresponds to Year=2005
#Boolean vector can be used to obtain subset of the rows or columns of a matrix

  
train=(Year<2005)
head(train)
tail(train)

#Smarket[train,] would pick out submatrix of the stock market data set, corresponding to the dates before 2005.
#Smarket[!train,] would pick out submatrix of the stock market data set containing only the observatins for which train is FALSE (Year=2005)

Smarket.2005=Smarket[!train,]
dim(Smarket.2005)

Direction.2005=Direction[!train]


############################################ PART B  ###########################################################################

###############  FIT THE LOGISTIC REGRESSION USING TRAINING DATA ONLY   ########################################################

################################################################################################################################


glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial,subset=train)



#################################################################################################################################

#########   TEST THE ACCURACY OF THE MODEL ON THE TEST OR HELD OUT DATA : in this example year = 2005 ###########################

##################################################################################################################################

#######################################  PART C   #############################################################################################

####################### ON THE TEST SAMPLE:  COMPUTE PROBABILITY OF MARKET GOING UP BASED ON THE PREDICTED MODEL   ##################################

####################################################################################################################################################


# Test the model by fitting the test data set into the fitted model
#The predict() function: predicts the market "Up" probability on a particular day on the basis of the predicted model


glm.probs=predict(glm.fit,Smarket.2005,type="response")




###########################################   PART D    #################################################################################

#########################   ON THE TEST SAMPLE : DECIDE WHETHER MARKET WILL GO UP OR DOWN ON A PARTICULAR DAY    ##############################


# compute the predictions for 2005 and compare them to the actual movements of the market over that time period.
#To predict whether market will move "Up" on a particular day, convert the predicted probabilities into class labels Up or Down.
# The following command creates a vector of nrow(Smarket.2005) Down elements
glm.pred=rep("Down",nrow(Smarket.2005))


#The following command transforms all the elements with predicted probabilities of market movement greater than 0.5 from Down to Up
glm.pred[glm.probs>.5]="Up"



#################################  PART E ##################################################################################################

############## COMPUTE MODEL ACCURACY: CONFUSION MATRIX ####################################################################################

############################################################################################################################################



#Table() produces a confusion matrix to determine how many observations were correctly or incorrectly classified
#The diagonal elements of the confusion matrix indicate the correct predictions and the off-diagonal elements represent incorrect predictions.

table(glm.pred,Direction.2005)

# Test accuracy rate
mean(glm.pred==Direction.2005)

# Test error rate
mean(glm.pred!=Direction.2005)




